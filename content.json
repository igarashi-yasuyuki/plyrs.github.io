{"meta":{"title":"Playlog","subtitle":null,"description":"My Playlog","author":"Hirofumii","url":"http://log.playr.jp"},"pages":[],"posts":[{"title":"Bitbucket × Jenkins","slug":"Windows10×Bitbucket×Jenkins","date":"2015-12-06T07:56:25.000Z","updated":"2016-03-02T07:57:50.692Z","comments":true,"path":"2015/12/06/Windows10×Bitbucket×Jenkins.html","link":"","permalink":"http://log.playr.jp/2015/12/06/Windows10×Bitbucket×Jenkins.html","excerpt":"","text":"個人開発用にローカルWindowsへJenkinsをインストールし、Bitbucketのプライベーソリポジトリへプッシュした内容を自動的にClで回してデプロイまでもっていきたい。 Clツールのためにサーバーを用意するほどではなく、課金してCircleCiするほどでもない案件。規模が大きくなるとどっかに移行したほうが楽かも。 Welcome to Jenkins CI! | Jenkins CI 公式。 JenkinsでCI環境構築チュートリアル (Windows編) - ICS MEDIA Windows7に、一人で使うためのJenkinsを入れてみた - メモ的な思考的な インストールからHelloWorldまでは上記が参考になった。 ユーザ作成を含む最低限のセキュリティ設定(Jenkins) - Qiita 基本的なセキュリティは、ちょっと古いようだが上記の流れで問題ない様子。 HOOK TURN • WindowsのJenkinsにssh証明書を設定してgitを利用する ユーザー認証。","categories":[],"tags":[{"name":"Jenkins","slug":"Jenkins","permalink":"http://log.playr.jp/tags/Jenkins/"}],"keywords":[]},{"title":"Default CSS","slug":"Default-CSS","date":"2015-12-04T07:36:04.000Z","updated":"2016-03-02T07:54:35.408Z","comments":true,"path":"2015/12/04/Default-CSS.html","link":"","permalink":"http://log.playr.jp/2015/12/04/Default-CSS.html","excerpt":"","text":"なんとなく気になって主要ブラウザのデフォルトCSSを調べてみた。 IE Internet Explorer UA Style Sheets Firefox mozilla-central mozilla/layout/style/html.css mozilla-central: layout/style/html.css@85cf2e720a84 Chrome Source/core/css/html.css - chromium/blink - Git at Google Safari trunk/Source/WebCore/css の html.css – WebKit Edgeは見つけきれなかったなぁ。","categories":[],"tags":[{"name":"CSS","slug":"CSS","permalink":"http://log.playr.jp/tags/CSS/"}],"keywords":[]},{"title":"多言語化","slug":"多言語化","date":"2015-12-02T07:33:25.000Z","updated":"2016-03-02T08:10:04.005Z","comments":true,"path":"2015/12/02/多言語化.html","link":"","permalink":"http://log.playr.jp/2015/12/02/多言語化.html","excerpt":"","text":"Webアプリを日本語の他に英語にも対応させることにした。 WEB+DB PRESS の78号でフロントエンド向けではあるが特集が組まれていたおり大いに参考になった。 WEB+DB PRESS Vol.78に「フロントエンドの国際化」について書いた！ - teppeis blog フロントエンドではi18n APIに期待したが、Safariが…。 globalization:specification_drafts [ES Wiki] Intl - JavaScript | MDN Can I use… Support tables for HTML5, CSS3, etc ライブラリ群では定番のMoment.jsも紹介されており、その後より広範囲なFormatJSが登場したりしているので、よく吟味したい。 Moment.js | Home FormatJS URLの設計をどうするかは未だ検討中だが、言語ごとに検索結果の最適化を行いたい場合はドメインを利用した手法がオススメなようだ。 How should I structure my URLs for both SEO and localization? - Webmasters Stack Exchange 多地域、多言語のサイト - Search Console ヘルプ Nodeではi18n向けライブラリが存在し、Koaでラップしたものも有志により作れれているので、この辺を使えば容易に行けそう。 mashpie/i18n-node koa-modules/i18n そして実装へサブドメインを使用したi18n化を実装した。 言語や地域の URL に hreflang を使用する - Search Console ヘルプ とりあえず検索エンジン向けにhreflangを記述した。HTTPヘッダーやサイトマップへ記す方法もあるようだが、今回はお手軽にhtmlへ直接書いた。 12&lt;link rel=\"alternate\" hreflang=\"en\" href=\"https://dewy.me/\"&gt;&lt;link rel=\"alternate\" hreflang=\"ja\" href=\"https://jp.dewy.me/\"&gt; 片方ずつ置けばいいのかと思いきや、両方のページに両方置かなければならないらしい。今回は2言語なのでごちゃごちゃすることはないが、増えるようだったらサイトマップを試してみたい。 【node.js &amp; express】国際化対応(i18n) « zoomAroid","categories":[],"tags":[{"name":"Node.js","slug":"Node-js","permalink":"http://log.playr.jp/tags/Node-js/"},{"name":"Koa","slug":"Koa","permalink":"http://log.playr.jp/tags/Koa/"}],"keywords":[]},{"title":"SourceTree-1.6.24","slug":"SourceTree-1-6-24","date":"2015-12-01T07:31:39.000Z","updated":"2016-03-02T07:32:16.979Z","comments":true,"path":"2015/12/01/SourceTree-1-6-24.html","link":"","permalink":"http://log.playr.jp/2015/12/01/SourceTree-1-6-24.html","excerpt":"","text":"SourceTree 1.6.24でBitbucketアカウントへのログインができない。 調べてみたらすでにヘルプへ上がっているので、そのうち修正されると思われる。どうやらWindows全般で起こっているようだ。 Password not working on SourceTree - Atlassian Answers 現時点での解決策は1.6.23へのダウングレードのようだが、一度アンインストールが必要でやや面倒なので様子を見ることにした。明日修正版が出なかったら実行することにする。","categories":[],"tags":[{"name":"SourceTree","slug":"SourceTree","permalink":"http://log.playr.jp/tags/SourceTree/"}],"keywords":[]},{"title":"Marker-Clusterer","slug":"Marker-Clusterer","date":"2015-11-29T12:30:15.000Z","updated":"2016-03-02T07:30:48.761Z","comments":true,"path":"2015/11/29/Marker-Clusterer.html","link":"","permalink":"http://log.playr.jp/2015/11/29/Marker-Clusterer.html","excerpt":"","text":"Google mapsへMarker Clustererを導入した。 googlemaps/js-marker-clusterer ライブラリを追加し、下記ドキュメントとデモを見たら大体の仕様は分かった。 MarkerClusterer for Google Maps v3 version 1.0 Reference MarkerCluster for v3 Documentation: Examples 基本的にはGoogleMapオブジェクトとマーカーの配列をnew MarkerClusterer()へ突っ込めば作動する。 オプションを渡してクラスター化のタイミングなどを制御できるようだが、ドキュメントを探すのにちょっと苦労した。おそらくVer.1と同様のようなので、ここを参照した。 gridSize - クラスター範囲のサイズ。デフォルトは60で、小さくすると精度が上がり、大きくするとパフォーマンスが上がる。 maxZoom - クラスター監視に限度を設定できる。設定以下だとクラスター対象のマーカー群を無視する。 styles - クラスターのスタイルを設定できる。配列で大サイズから小への順番で。 大量のマーカーを配置するならユーザビリティ的に恩恵は大きいと思う。スマートフォンでもパフォーマンス上の問題は無さそう。 しかしマーカーが比較的密集していると、ズームレベル15では単独表示だったが、16へズームするとクラスター化されてしまうという不自然な挙動が見られた。恐らくクラスター化のグリッド計算アルゴリズムの仕様なのでしょうがないかも。","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://log.playr.jp/tags/JavaScript/"}],"keywords":[]},{"title":"Icon","slug":"Icon","date":"2015-11-27T11:25:48.000Z","updated":"2016-03-02T07:29:27.155Z","comments":true,"path":"2015/11/27/Icon.html","link":"","permalink":"http://log.playr.jp/2015/11/27/Icon.html","excerpt":"","text":"ちょっとIconのデザインを考えてた。やはりガイドラインを参考にしたら、理詰めでいい感じできたりする。 Icons - Style - Google design guidelines iOS Human Interface Guidelines: Icons and Graphics ちょっと違うが、GoogleはUI向けマテリアルデザイン用のアイコン群を公開しているようで、Androidに特化する場合はここから使ってもよさそう。 https://www.google.com/design/icons/","categories":[],"tags":[{"name":"Design","slug":"Design","permalink":"http://log.playr.jp/tags/Design/"}],"keywords":[]},{"title":"Splash-Screens","slug":"Splash-Screens","date":"2015-11-26T07:19:33.000Z","updated":"2016-03-02T07:24:55.333Z","comments":true,"path":"2015/11/26/Splash-Screens.html","link":"","permalink":"http://log.playr.jp/2015/11/26/Splash-Screens.html","excerpt":"","text":"仕様を見ているとスプラッシュイメージの項目があったので、manifest.jsonをアップデートしてみた。もちろん、現段階で対応しているブラウザは無い。しかし、Android版 Google Chromeはアイコンをスプラッシュイメージ的に出すようになっているので、今後この機能も有効化されるであろう。 123456789101112131415161718192021222324&#123; \"name\": \"Kinlan's Amazing Application ++\", \"short_name\": \"Kinlan's Amaze App\", \"icons\": [ &#123; \"src\": \"launcher-icon-3x.png\", \"sizes\": \"144x144\", \"type\": \"image/png\" &#125; ], \"splash_screens\": [&#123; \"src\": \"splash/lowres\", \"sizes\": \"320x240\" &#125;, &#123; \"src\": \"splash/hd_small\", \"sizes\": \"1334x750\" &#125;, &#123; \"src\": \"splash/hd_hi\", \"sizes\": \"1920x1080\", \"density\": 3 &#125;], \"start_url\": \"index.html\", \"display\": \"standalone\"&#125; ちなみに我らがFirefoxはOpen Web Appsなるものを提唱している。 Open Web Apps を始めよう – なぜ、そしてどのように | Mozilla Developer Street (modest) Application Cacheなど、現在では非推奨となっている手法の紹介も含まれているが、Open Web Appへの誘いとして分かりやすい記事。 Open Web Appをホスト型とパッケージ型の2つへ分類し、それぞれのメリデメリを紹介。 アプリマニフェスト - アプリセンター | MDN manifest.webappの詳細 Open Web Apps と Web 標準 | MDN アプリテンプレートの使用 - アプリセンター | MDN","categories":[],"tags":[{"name":"WebApp","slug":"WebApp","permalink":"http://log.playr.jp/tags/WebApp/"}],"keywords":[]},{"title":"Google OAuth","slug":"Google-OAuth","date":"2015-11-06T13:39:20.000Z","updated":"2016-03-21T13:41:25.485Z","comments":true,"path":"2015/11/06/Google-OAuth.html","link":"","permalink":"http://log.playr.jp/2015/11/06/Google-OAuth.html","excerpt":"","text":"DewyへGoogleアカウントによるログイン機能を実装した。これまで通りsimov/grantを利用したので、基本的に流れはFacebookやTwitterのときと同じであった。 Google OAuth 2.0 を使い、Web アプリケーションに認証機能を追加する - komiyakの通り道 アクセストークンの取得などには上記記事が参考になった。記事が少し古く、現在のUIとやや違う部分はあったが、問題はなかった。また、Twitterと比べ項目が多く、Facebookと違ってしっかり日本語で表示れてるので色々見ていて楽しい。今回はGoogle+のAPIを触るのみでありが、機会があれば他にも試してみたくなる。","categories":[],"tags":[{"name":"Node.js","slug":"Node-js","permalink":"http://log.playr.jp/tags/Node-js/"}],"keywords":[]},{"title":"dialog-element","slug":"dialog-element","date":"2015-11-06T08:32:20.000Z","updated":"2016-03-02T08:39:21.543Z","comments":true,"path":"2015/11/06/dialog-element.html","link":"","permalink":"http://log.playr.jp/2015/11/06/dialog-element.html","excerpt":"","text":"ダイアログを作っているので、今Dialogエレメントってどうなっているのか調べてみた。 Can I use… Support tables for HTML5, CSS3, etc 相変わらずblink系のみの対応である。 Chrome Canary が dialog 要素に対応、ダイアログボックスの表示が簡単に | WWW WATCH the new code – Native Modal Windows in HTML5: Using the dialog Element dialog element demo 具体的な実装方法は上記記事などが参考になり、その利便性もよくわかる。 GoogleChrome/dialog-polyfill: Polyfill for the dialog element ポリフィルもChromeチーム自ら提供している。 が、やはりせめてもう一つぐらい対応ブラウザが増えないと一生ポリフィルを抜け出せない不安が残る。現時点での実践投入はまだ早いかと。","categories":[],"tags":[{"name":"HTML","slug":"HTML","permalink":"http://log.playr.jp/tags/HTML/"}],"keywords":[]},{"title":"Push通知","slug":"Push通知","date":"2015-11-02T12:27:39.000Z","updated":"2016-03-02T08:30:58.491Z","comments":true,"path":"2015/11/02/Push通知.html","link":"","permalink":"http://log.playr.jp/2015/11/02/Push通知.html","excerpt":"","text":"最近ブラウザにもPush通知の足音が聞こえ始めている。なので基礎学習は始めておきたい。 Service WorkerでブラウザにPush通知をする - 1000ch.net ChromeでW3C Push APIを使ってみた - Qiita エッジな方々は既に検証を開始している様子。ここはやはりFirefoxでも試したい。 HTML5 - Firefox (Developer Edition)でW3C Push APIを使ってみる - Qiita Firefoxの実装もかなり進んでいるようで、期待大。問題はモバイルFirefoxの普及だろう。","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://log.playr.jp/tags/JavaScript/"}],"keywords":[]},{"title":"gulp-progeny","slug":"gulp-progeny","date":"2015-10-31T12:17:26.000Z","updated":"2016-03-02T08:26:24.192Z","comments":true,"path":"2015/10/31/gulp-progeny.html","link":"","permalink":"http://log.playr.jp/2015/10/31/gulp-progeny.html","excerpt":"","text":"SassをGulp経由でWathする際に、差分ビルドを有効にするためgulp-cachedをかますのだが、そうすると@importなどで読み込んでいるファイルを更新しても読み込み元のビルドは動作しない。 これを上手く解決する方法はないかと調べたら以下の記事を見つけた。 gulpを使ってsassの@importを解決しつつ差分ビルドをする - Qiita なるほど！依存元を辿り解決を図ればいいとのこと。 これに特化したgulpモジュールがあると楽チンやんーと再調査を行うと、gulp-progenyなるものを発見。 HerringtonDarkholme/gulp-progeny まさに依存関係を解決してくれるよう。 12345678910const cache = require('gulp-cached');const progeny = require('gulp-progeny');const sass = require('gulp-sass');gulp.task('sass', () =&gt; &#123; return gulp.src('*.scss') .pipe(cache('style')) .pipe(progeny()) .pipe(sass())&#125;); これでSass内でインポートしているファイルの更新も監視対象となり、ビルドが走るようになった。","categories":[],"tags":[{"name":"Node.js","slug":"Node-js","permalink":"http://log.playr.jp/tags/Node-js/"}],"keywords":[]},{"title":"Critical-Path-CSS","slug":"Critical-Path-CSS","date":"2015-10-31T07:12:22.000Z","updated":"2016-03-02T08:09:50.742Z","comments":true,"path":"2015/10/31/Critical-Path-CSS.html","link":"","permalink":"http://log.playr.jp/2015/10/31/Critical-Path-CSS.html","excerpt":"","text":"ちらほらと名前を聞くようになってきたので、基礎学習を始めた。 そろそろクリティカルCSSについて説明しておこうか | Yuhiisk Smashing Magazineのパフォーマンス改善ケースが凄まじい件 - MOL Understanding Critical CSS – Smashing Magazine 記事は詳しく解説したものが見つかり、大変参考になった。 ツールでは有名なものでaddyosmaniが作ったcriticalが定番っぽい。 addyosmani/critical addyosmani/critical-path-css-demo penthouseはオンラインデモもあり、ちょっと試すにはいいかも。 pocketjoso/penthouse: Critical Path CSS Generator Critical Path CSS Generator - by Jonas Ohlsson またちょっと古いがワザノバさんの下記記事はパフォーマンスツールを網羅的に紹介しており、見てて面白い。 CSSパフォーマンスツールを使いこなす - ワザノバ | wazanova","categories":[],"tags":[{"name":"Node.js","slug":"Node-js","permalink":"http://log.playr.jp/tags/Node-js/"},{"name":"CSS","slug":"CSS","permalink":"http://log.playr.jp/tags/CSS/"}],"keywords":[]},{"title":"VanillaなDropdown","slug":"VanillaなDropdown","date":"2015-10-30T07:08:49.000Z","updated":"2016-03-02T07:10:35.715Z","comments":true,"path":"2015/10/30/VanillaなDropdown.html","link":"","permalink":"http://log.playr.jp/2015/10/30/VanillaなDropdown.html","excerpt":"","text":"バニラなドロップダウンメニューを作成中。まぁ単純にクラスの追加・削除を制御すればいいのだが、一応参考資料を探す。がやはり、jQueryを用いたものは多数見つかるのに対し、バニラは希少である。 今回参考になったのは以下の二つ。 Javascript Drop Down Menu CodePen - A Pen by Brenden Palmer 表示の制御はCSSで行い、アクティブ時のオーバービューエフェクトは無し。メニュー外のクリックの際に閉じるようdocumentにもイベントを追加。あとは最適なアニメーションを考慮すればよさそう。","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://log.playr.jp/tags/JavaScript/"}],"keywords":[]},{"title":"Github-Flow","slug":"Github-Flow","date":"2015-10-29T10:06:19.000Z","updated":"2016-03-02T07:08:07.188Z","comments":true,"path":"2015/10/29/Github-Flow.html","link":"","permalink":"http://log.playr.jp/2015/10/29/Github-Flow.html","excerpt":"","text":"現状Gitを用いたバージョン管理にはSourceTreeを利用しており、惰性でGit Flowで運用を行っていた。が、コードの規模を考えるとやはりGithub Flowで十分だとは感じており、乗り換えのタイミングを模索し、今日に至る。 思案もう少し様子を見てエディタをBracketsからVisualeStudio Codeへ乗り換えることを考えており、そのタイミングにはスムーズに開発flowも移行したいと思う。 資料 GitHub Flow (Japanese translation) 上記翻訳を精読したらほぼ大丈夫そう。 Github-flowを分かりやすく図解してみた - pyar.bz これも分かりやすい。","categories":[],"tags":[{"name":"Git","slug":"Git","permalink":"http://log.playr.jp/tags/Git/"}],"keywords":[]},{"title":"Comit in English","slug":"Comit-in-English","date":"2015-10-29T07:04:04.000Z","updated":"2016-03-02T07:06:36.020Z","comments":true,"path":"2015/10/29/Comit-in-English.html","link":"","permalink":"http://log.playr.jp/2015/10/29/Comit-in-English.html","excerpt":"","text":"英語でコミットメッセージを書く時のカンペを作成したい。 参考記事はググれば色々出てくる。 ネイティブと働いて分かった英語コミットメッセージの頻出動詞10つ - Qiita Git - 英語コミットコメントに使えるオシャレフレーズ集 - Qiita ChangeLog を支える英語 azu/awesome-commit-english git commit時のコメントを英語で書くための最初の一歩 | hiro345 こんなサービスも発見。 commit-m: GitHubコミットメッセージの文例が検索できるサービス","categories":[],"tags":[{"name":"Git","slug":"Git","permalink":"http://log.playr.jp/tags/Git/"}],"keywords":[]},{"title":"SNS Feeds","slug":"SNS-Feeds","date":"2015-10-23T07:00:28.000Z","updated":"2016-03-02T07:02:12.525Z","comments":true,"path":"2015/10/23/SNS-Feeds.html","link":"","permalink":"http://log.playr.jp/2015/10/23/SNS-Feeds.html","excerpt":"","text":"複数のSNSアカウントの投稿を一つにまとめて表示する機能を実装したい。まずAPIをたたいてフィードを引っ張て来る仕事をクライアントにさせるかサーバーサイドで頑張るか考えた。 クライアントで行うと既存のjQueryライブラリの恩恵などを受けられ、導入のハードルと労力は低そうである。サーバーサイドで行うとブラウザに頼らない形で実装できる部分が増えるので、万人に同様の体験を提供できそうである。レンダリングもサーバーで行えばSNSアカウントへ投稿することでサイトの更新とみなされ、インデックスもされやすいかも。 今回は調査の過程で下記のプラグインを発見したので、とりあえずクライアントで実装してみることにした。 pavelk2/social-feed 今回結び付けたいSNSは以下の3つ。 Facebook Twitter instagram 条件にあてはまるうえ、現在進行形でメンテされているようで安心して導入できそうである。","categories":[],"tags":[],"keywords":[]},{"title":"Timezone","slug":"Timezone","date":"2015-10-19T10:56:41.000Z","updated":"2016-03-02T06:58:53.375Z","comments":true,"path":"2015/10/19/Timezone.html","link":"","permalink":"http://log.playr.jp/2015/10/19/Timezone.html","excerpt":"","text":"なぜかgetHoursが正確に取得できないと思っていたら、開発環境であるVagrant内CentOSのタイムゾーンがずれていた。以下ContOS7での設定方法。 12345# 日付を確認$ timedatectl # タイムゾーンを設定$ timedatectl set-timezone Asia/Tokyo 環境構築の際に適切に設定が必要なので、Ansibleへ盛り込みたい。 ついでにローケルも設定した。 123$ localectl set-locale LANG=ja_JP.eucjp$ localectl status$ source /etc/locale.conf","categories":[],"tags":[{"name":"CentOS","slug":"CentOS","permalink":"http://log.playr.jp/tags/CentOS/"}],"keywords":[]},{"title":"脱 jQuery","slug":"脱-jQuery","date":"2015-10-14T11:54:51.000Z","updated":"2016-03-02T06:56:01.238Z","comments":true,"path":"2015/10/14/脱-jQuery.html","link":"","permalink":"http://log.playr.jp/2015/10/14/脱-jQuery.html","excerpt":"","text":"jQueryは有害なのか | プログラミング | POSTD 上記記事を読んだ。最近は僕もjQueryをほとんど使っていなくて、共感できる部分は多かった。しかしそれは個人開発の場の話で、チームでの開発で複数人でJavaScriptを触る場合は、ｊQueryを採用することである程度、秩序ができる利点はあると思う。完全なる脱jQueryのためには、完璧なる規約とリンターの整備が必要かも。","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://log.playr.jp/tags/JavaScript/"}],"keywords":[]},{"title":"Microdata","slug":"microdata","date":"2015-10-14T10:54:30.000Z","updated":"2016-03-02T06:55:29.491Z","comments":true,"path":"2015/10/14/microdata.html","link":"","permalink":"http://log.playr.jp/2015/10/14/microdata.html","excerpt":"","text":"Webアクセシビリティは他の要素と比べて後回しにされがちである。しかし、マルチデバイス化が進みつづける中ではとても重要な機能だろう。 Webサイトをマークアップを通じて構造化する手法として、以下のものがある。 Microformats Microdata RDFa Microdata サーチエンジンの導入状況や仕様を鑑みると、現時点ではMircodataを導入するのがよさそうだ。一方、JSON-LDは将来有望な大型新人なので、段階的な移行は考慮したい。 Home - schema.org Microdata、RDFs、Microdataを促進するschema.orgの公式サイトはこちら。概要や導入方法、ドキュメントがまとめられている。 構造化データ マークアップ支援ツール Structured Data Testing Tool | Google Developers Googleは既に検索結果へスキーマを反映している。いくつか導入支援ツールも公開されているので、活用したい。 Microdataなどの構造化データ マークアップについて｜Web Design KOJIKA17 上記記事は概要や実践例をわかりやすくまとめており、参考になった。","categories":[],"tags":[{"name":"Microdata","slug":"Microdata","permalink":"http://log.playr.jp/tags/Microdata/"}],"keywords":[]},{"title":"Firefox Add-on","slug":"Firefox-Add-on","date":"2015-10-10T12:42:26.000Z","updated":"2016-02-28T16:47:08.400Z","comments":true,"path":"2015/10/10/Firefox-Add-on.html","link":"","permalink":"http://log.playr.jp/2015/10/10/Firefox-Add-on.html","excerpt":"","text":"ちょっとFirefox拡張書く欲が出てきているので、ちょっとだけ資料を集めた。 初めてでも理解できるようになる「Firefox機能拡張の開発」 | OXY NOTES mozilla-jetpack/jpm 現時点でのモダンな書き方なら上記を参考に行えばよさそう。しかし近未来のうちにWebExtensionsへの移行が計画されているので、いざ書くとなると下記リポジトリやクローム周りの情報を漁っていくことになりそう。 mdn/webextensions-examples","categories":[],"tags":[{"name":"Firefox","slug":"Firefox","permalink":"http://log.playr.jp/tags/Firefox/"}],"keywords":[]},{"title":"sitemap.xml","slug":"sitemap-xml","date":"2015-10-07T11:40:14.000Z","updated":"2016-02-28T16:41:14.022Z","comments":true,"path":"2015/10/07/sitemap-xml.html","link":"","permalink":"http://log.playr.jp/2015/10/07/sitemap-xml.html","excerpt":"","text":"グーグルに正しくインデックスしてもらうため、作成したNodeアプリケーションへsitemap.xmlを追加したい。清く正しくsitemap.xmlを理解するなら以下を参照。 sitemaps.org - ホーム サイトマップについて - Search Console ヘルプ 普段は以下のオンラインジェネレーターを利用し配備していた。 Create your Google Sitemap Online - XML Sitemaps Generator これを利用すれば静的コンテンツは自動的にクロールをし追加してくれるが、動的に追加されるコンテンツはそのたびに作成しなおさなければならないため難儀である。そこでsitemap.jsを利用しアプリ内でリクエストがあったさいに動的にxmlを作成し発行する仕組みを作った。 ekalinin/sitemap.js ExapmpeにExpressでの使用例が書かれており、Koaでもほぼそのまま流用できた。Promiseでラップし、Yiedableにすればほぼ完了である。 あとはDBへアクセスしヒットしたコンテンツをsitemap.xmlへ追加すれば完了である。","categories":[],"tags":[],"keywords":[]},{"title":"Update @font-face","slug":"Update-font-face","date":"2015-10-06T11:34:51.000Z","updated":"2016-02-28T16:36:25.408Z","comments":true,"path":"2015/10/06/Update-font-face.html","link":"","permalink":"http://log.playr.jp/2015/10/06/Update-font-face.html","excerpt":"","text":"cssの@font-faceのフォーマットをアップデートした。 これまではFontspring @Font-Face Syntaxに従い以下のように記述していた。 12345678@font-face &#123; font-family: 'MyFontFamily'; src: url('myfont-webfont.eot?#iefix') format('embedded-opentype'), url('myfont-webfont.woff2') format('woff2'), url('myfont-webfont.woff') format('woff'), url('myfont-webfont.ttf') format('truetype'), url('myfont-webfont.svg#svgFontName') format('svg');&#125; 対応ブラウザは以下とされている。 IE Firefox Chrome Safari Opera iOS Android 6+ 3.5+ 3.5+ 3+ 11+ 3.2+ 2.2+ この書式はは2011年に提唱されたもので、2015年ゲイン材のブラウザ情勢からみるとやや冗長に感じる。 よって下記を参考に今回アップデートを図った。 Using @font-face | CSS-Tricks 123456@font-face &#123; font-family: 'MyFontFamily'; src: url('myfont-webfont.woff2') format('woff2'), url('myfont-webfont.woff') format('woff'), url('myfont-webfont.ttf') format('truetype');&#125; eotとsvgを削除した。この変更後の対応ブラウザは以下である。 IE Firefox Chrome Safari Opera iOS Android 9+ 3.5+ 3.5+ 3+ 10.1+ 4.3+ 2.2+ IE9からはWoffに対応しているので、もう少し時間がたてばTTFも消せるのでは。Woff2の普及はまだまだこれからといったところだ。","categories":[],"tags":[{"name":"CSS","slug":"CSS","permalink":"http://log.playr.jp/tags/CSS/"}],"keywords":[]},{"title":"CSS font-familyをアップデート","slug":"CSS-font-familyをアップデート","date":"2015-10-05T16:38:22.000Z","updated":"2016-02-28T16:39:19.352Z","comments":true,"path":"2015/10/06/CSS-font-familyをアップデート.html","link":"","permalink":"http://log.playr.jp/2015/10/06/CSS-font-familyをアップデート.html","excerpt":"","text":"CSS font-familyの記述をアップデートした。 これまでは以下のように指定していた。 123body &#123; font-family: Verdana, Arial, \"ヒラギノ角ゴ ProN\", \"Hiragino Kaku Gothic ProN\", \"メイリオ\", Meiryo, \"ＭＳ Ｐゴシック\", sans-serif;&#125; 昔どこかで見た記事やソースを参考にたどり着いたと記憶しているが、Windows10へ移行したこともありフォント回りも同様に更新していこうと思う。 Font−familyのベストな書き方 2015年版 | それからデザイン スタッフブログ 上記記事は非常によく考察されており信頼たる内容だと感じたので、これをベースに以下のように設定した。 123body &#123; font-family: Avenir, \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, Verdana, Roboto, \"游ゴシック\", \"Yu Gothic\", \"游ゴシック体\", \"YuGothic\", \"ヒラギノ角ゴ Pro W3\", \"Hiragino Kaku Gothic Pro\", \"Meiryo UI\", \"メイリオ\", Meiryo, sans-serif;&#125; MSPゴシックだけはさすがに不要だと思い外させていただいた。とりあえずこれで様子を見ていこうと思う。","categories":[],"tags":[{"name":"CSS","slug":"CSS","permalink":"http://log.playr.jp/tags/CSS/"}],"keywords":[]},{"title":"wysiwyg","slug":"wysiwyg","date":"2015-10-03T12:25:37.000Z","updated":"2016-02-28T16:32:37.302Z","comments":true,"path":"2015/10/03/wysiwyg.html","link":"","permalink":"http://log.playr.jp/2015/10/03/wysiwyg.html","excerpt":"","text":"Webアプリ内にてwysiwygを導入したい。 Javascript WYSIWYG editors · cheeaun/mooeditable Wiki 上記リストがよくまとまっており、大いに参考なった。今回jQuery先生は極力使いたくないので、最初である程度候補は絞られる。 とりあえずその中からwysiwyg.jsを試してみる方針。オンラインデモを触っている分にはいい感じで、ドキュメントもそこそこ整理されていて扱いやすそう。","categories":[],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"http://log.playr.jp/tags/Javascript/"}],"keywords":[]},{"title":"SoyCMSをConohaへ","slug":"SoyCMSをConohaへ","date":"2015-09-30T11:23:07.000Z","updated":"2016-02-28T16:24:26.003Z","comments":true,"path":"2015/09/30/SoyCMSをConohaへ.html","link":"","permalink":"http://log.playr.jp/2015/09/30/SoyCMSをConohaへ.html","excerpt":"","text":"壊滅状態のNAUTILUSのサイトをそろそろ復活させるべく、重い腰を上げた。 当時ロリポップで運用していたのだが、インフラにこだわりはじめサーバー引っ越しを繰り返す中でいつしかトップページ以外開かないといった状態へと変貌を遂げた。というのもXserverへの引っ越しはスムーズに行ったものの、その後のVPSへの移行はハマリどことが多く、面倒になってしまったのだ。 今回復活にあたって参考になったペーシ一覧。 SOY CMS 公式サイト SOY CMS インストール - KAGOYA Internet Routing SOY CMS フォーラム • トピックの表示 - ミニム レンタルサーバー動作検証しました SOY CMS フォーラム • トピックの表示 - 他サイトラベルブロックについて パーミッションの設定と、一部のPHPモジュールのインストールで現状問題なく動作している様子。 そもそもこのサイトのためだけにApacheとPHPインストールするのもな～と思い、いっそ内部をNodeで書き換えようかとも思ったが、改めて見てみると記事の量も結構多いからそれはそれで遠回りになりそう。","categories":[],"tags":[{"name":"Conoha","slug":"Conoha","permalink":"http://log.playr.jp/tags/Conoha/"},{"name":"SoyCMS","slug":"SoyCMS","permalink":"http://log.playr.jp/tags/SoyCMS/"}],"keywords":[]},{"title":"MongoDB $unset","slug":"MongoDB-unset","date":"2015-09-28T11:20:49.000Z","updated":"2016-02-28T16:21:37.551Z","comments":true,"path":"2015/09/28/MongoDB-unset.html","link":"","permalink":"http://log.playr.jp/2015/09/28/MongoDB-unset.html","excerpt":"","text":"MongoDBで特定のドキュメントの特定のフィールドを削除するには$unsetを使えばスマートらしい。 $unset — MongoDB Manual 3.0 これはMongoDB2からの機能で、それ以前はundefinedやnullを入れて対応していたらしい。 1User.collection.update(&#123;_id: user._id&#125;, &#123;field: undefined&#125;); 昔はこうだったのが… 1User.collection.update(&#123;_id: user._id&#125;, &#123;$unset: &#123;field: 1 &#125;&#125;); こうらしい。","categories":[],"tags":[{"name":"MongoDB","slug":"MongoDB","permalink":"http://log.playr.jp/tags/MongoDB/"}],"keywords":[]},{"title":"Nunjucks","slug":"Nunjucks","date":"2015-09-26T16:16:32.000Z","updated":"2016-03-02T08:08:39.025Z","comments":true,"path":"2015/09/27/Nunjucks.html","link":"","permalink":"http://log.playr.jp/2015/09/27/Nunjucks.html","excerpt":"","text":"愛用していたテンプレートエンジンであるSwigが残念ながら開発終了となっていたので、Nunjucksへ引っ越しをした。 Nunjucks これはSwigの作者が代替として推薦しているMozillaのプロジェクトで、構文が類似しており乗り換えも用意であった。 12345678910111213&#123;% extends \"base.html\" %&#125;&#123;% block header %&#125; &lt;h1&gt;&#123;&#123; title &#125;&#125;&lt;/h1&gt;&#123;% endblock %&#125;&#123;% block content %&#125; &lt;ul&gt; &#123;% for name, item in items %&#125; &lt;li&gt;&#123;&#123; name &#125;&#125;: &#123;&#123; item &#125;&#125;&lt;/li&gt; &#123;% endfor %&#125; &lt;/ul&gt;&#123;% endblock %&#125; Swigと比較してドキュメントも見やすく、機能も充実、パフォーマンスも良好である。Swigはif条件式を埋め込む際に何故かelseをサポートしておらず、やや冗長な記述を強いられていたが、Nunjucksは当然対応しており見渡しが良くなった。 Jijja2というPythonのテンプレートエンジンの影響を受けているらしく、ドキュメントもちょくちょくJinja2のドキュメントに飛ばされたり、issueを眺めていてもJinja2の機能を基準に実装を決めている節があり、謎のJinja愛がほほえましかった。","categories":[],"tags":[{"name":"Node.js","slug":"Node-js","permalink":"http://log.playr.jp/tags/Node-js/"}],"keywords":[]},{"title":"Koaでファイルアップローダー","slug":"Koaでファイルアップローダー","date":"2015-09-24T15:59:32.000Z","updated":"2016-03-02T08:09:16.339Z","comments":true,"path":"2015/09/25/Koaでファイルアップローダー.html","link":"","permalink":"http://log.playr.jp/2015/09/25/Koaでファイルアップローダー.html","excerpt":"","text":"Koaアプリケーションにファイルアップローダーを実装した。 cojs/busboy モジュールは例によってbusboyをcoでラップしたco-busboyを使用。 アップローダーはなかなか奥が深くて面白そうなので、機会があったら他のモジュールも試してみたい。去年のNode学園祭でGuillermoが紹介していたPartyは何処へいったんだろう…。","categories":[],"tags":[{"name":"Node.js","slug":"Node-js","permalink":"http://log.playr.jp/tags/Node-js/"},{"name":"Koa","slug":"Koa","permalink":"http://log.playr.jp/tags/Koa/"}],"keywords":[]},{"title":"Firefox リモートデバッグを導入","slug":"Firefoxリモートデバッグを導入","date":"2015-09-23T15:53:06.000Z","updated":"2016-02-28T15:57:27.170Z","comments":true,"path":"2015/09/24/Firefoxリモートデバッグを導入.html","link":"","permalink":"http://log.playr.jp/2015/09/24/Firefoxリモートデバッグを導入.html","excerpt":"","text":"スマホサイトのデバッグ環境を本格的に整備しようと思い、とりあえず愛用のFirefoxによるリモートデバッグを導入。 WebIDE による Android 版 Firefox のデバッグ - 開発ツール | MDN 今回はUSBで接続したAndroid版Firefoxでデバッグを試した。ここまでは容易に完了できたが、Wifi経由でやろうとすると色々面倒くさそうかな。","categories":[],"tags":[{"name":"Firefox","slug":"Firefox","permalink":"http://log.playr.jp/tags/Firefox/"}],"keywords":[]},{"title":"npm ローカルモジュール問題","slug":"npmローカルモジュール問題","date":"2015-09-22T15:50:12.000Z","updated":"2016-03-02T08:09:21.508Z","comments":true,"path":"2015/09/23/npmローカルモジュール問題.html","link":"","permalink":"http://log.playr.jp/2015/09/23/npmローカルモジュール問題.html","excerpt":"","text":"これまでの手法その時何を思ってこの方法を採用したのかは忘れてしまったが、今まではグローバル変数を用いて解決していた。 Better local require() paths for Node.js 上記のGistでのパターン2である。 123global.__base = __dirname + '/';var Article = require(__base + 'app/models/article'); 再考そーいえばnpmにこの問題を解決する機能が導入されてたっけ、と思い試してみる。 npm 2.0.0でローカルモジュールを使ってrequire(‘../../../‘)を回避する | Web Scratch しかしこの方法、ちょろっとした機能を追加するには大げさすぎて難儀に感じる。僕の使い方ではデメリットのほうが勝る気が…。 他の手法を調べてみてもなかなかしっくりこない。改めて難しい問題だと感じる。 結果これまでの方法をテンプレートリテラルで書き直して使い続ける結論に至った。 123global.__base = __dirname + '/';const Article = require(`$&#123;__base&#125;app/models/article`); いつの日か光あれ！","categories":[],"tags":[{"name":"Node.js","slug":"Node-js","permalink":"http://log.playr.jp/tags/Node-js/"},{"name":"npm","slug":"npm","permalink":"http://log.playr.jp/tags/npm/"}],"keywords":[]},{"title":"nl2br","slug":"nl2br","date":"2015-09-22T15:47:37.000Z","updated":"2016-03-02T08:09:05.314Z","comments":true,"path":"2015/09/23/nl2br.html","link":"","permalink":"http://log.playr.jp/2015/09/23/nl2br.html","excerpt":"","text":"PHPのnl2brのような関数がほしい。 こーゆー機能はテンプレートエンジンに搭載されていてそうだけど、愛用しているSwigにはないみたい。 paularmstrong/swig-extras 拡張はみつかった。 JavaScript nl2br function - php.js 改行コードの返還だけが目的ならここを参考にちっちゃいライブラリを作ったほうがよさそう。","categories":[],"tags":[{"name":"Node.js","slug":"Node-js","permalink":"http://log.playr.jp/tags/Node-js/"}],"keywords":[]},{"title":"NPM3 導入してみた","slug":"NPM3導入してみた","date":"2015-09-20T15:44:44.000Z","updated":"2016-03-02T08:09:27.012Z","comments":true,"path":"2015/09/21/NPM3導入してみた.html","link":"","permalink":"http://log.playr.jp/2015/09/21/NPM3導入してみた.html","excerpt":"","text":"メジャーリリースされたとのことで、NPMをv3へアップデート。 1$ npm i -g npm とりあえずモジュールのインストールを再実行してみた。 フラット化の結果25のモジュールインストールに対して300個がnode_modules内に召還された。時間もなんか長かったな…。この辺は徐々に高速化されていくのだろうか。間違ってもpackege.json管轄外でインスコしないように気を付けなければ、不幸な孤児が生まれそうである。","categories":[],"tags":[{"name":"Node.js","slug":"Node-js","permalink":"http://log.playr.jp/tags/Node-js/"},{"name":"npm","slug":"npm","permalink":"http://log.playr.jp/tags/npm/"}],"keywords":[]},{"title":"知っておくといいNode.jsの７つの事","slug":"知っておくといいNode-jsの７つの事","date":"2015-09-18T15:20:15.000Z","updated":"2016-02-28T15:43:48.875Z","comments":true,"path":"2015/09/19/知っておくといいNode-jsの７つの事.html","link":"","permalink":"http://log.playr.jp/2015/09/19/知っておくといいNode-jsの７つの事.html","excerpt":"","text":"読んだ。 My 7 Node.js mantras — Medium Promise使え！ ES6、いいよ！ セマンティックバージョンには気を付けろ！ 使っているモジュールを読み解け！ ユニットテスト書こう！ 俺たちはV8と共に生きている！ ESLint使おうぜ！ ってことでしょうか。","categories":[],"tags":[{"name":"Node.js","slug":"Node-js","permalink":"http://log.playr.jp/tags/Node-js/"}],"keywords":[]},{"title":"Yamlを学ぶ","slug":"Yamlを学ぶ","date":"2015-09-18T12:39:58.000Z","updated":"2016-03-02T08:09:37.716Z","comments":true,"path":"2015/09/18/Yamlを学ぶ.html","link":"","permalink":"http://log.playr.jp/2015/09/18/Yamlを学ぶ.html","excerpt":"","text":"AnsibleのPlaybookはYamlで書かなければならない。見よう見まねで動くコードは結構書けるが、インフラにかかわる技術なのできちんと学んだほうがよいだろう。 The Official YAML Web Site YAML - Wikipedia こういうときにWikipediaで概要をさくっと理解するのは効率がいいと思った。 ansible使いのためのYAML入門 - @znz blog とりあえずAnsible用途限定で学ぶならここで Rubyist Magazine - プログラマーのための YAML 入門 (初級編) 本格的にアプリケーションへ導入したいのであればここかと。 少し触ってみた感触ではXMLよりは簡潔に書けて、JSONよりは設定ファイルに向いていそう。コメントも書ける。","categories":[],"tags":[{"name":"Ansible","slug":"Ansible","permalink":"http://log.playr.jp/tags/Ansible/"}],"keywords":[]},{"title":"Ansible","slug":"Ansible","date":"2015-09-18T11:35:34.000Z","updated":"2016-02-28T15:38:54.652Z","comments":true,"path":"2015/09/18/Ansible.html","link":"","permalink":"http://log.playr.jp/2015/09/18/Ansible.html","excerpt":"","text":"Vagrant上への開発環境の構築をAnsibleを利用したい。 Ansible is Simple IT Automation Ansible Documentation 公式とドキュメント。 Ansible 入門 - Qiita エージェントレスでシンプルな構成管理ツール「Ansible」入門 - さくらのナレッジ このへんに目を通せばだいたい使えそう。ドットインストールのAnsible入門は有料化しちゃったのね…。 冪等性は英語でidempotenceということを学んだ。 WindowsでVagrantとAnsibleを使ってみた話 | もやし工房 ansibleでnvmを管理する - Qiita leonidas/ansible-nvm Vagrant+Ansible+git-hooks+foreverでNodejsの開発環境作った話 Ansible の Playbook を使ってみる - akishin999の日記 この辺を参考にするとWindowsやNode.jsをからめたAnsile導入はだいたいできそうかと。","categories":[],"tags":[{"name":"Vagrant","slug":"Vagrant","permalink":"http://log.playr.jp/tags/Vagrant/"},{"name":"Ansible","slug":"Ansible","permalink":"http://log.playr.jp/tags/Ansible/"}],"keywords":[]},{"title":"位置情報の文字列化","slug":"位置情報の文字列化","date":"2015-09-17T15:20:56.000Z","updated":"2016-02-28T15:32:52.153Z","comments":true,"path":"2015/09/18/位置情報の文字列化.html","link":"","permalink":"http://log.playr.jp/2015/09/18/位置情報の文字列化.html","excerpt":"","text":"取得した位置情報を文字列化し、URLやデータベースで利用したい。 主な選択肢は下記３つ GeoHash GeoHex plus+codes 現時点で十分に枯れていそうなのはGeoHashかなと。GeoHexはかっこいいが、今回の利用用とではビジュアルは無関係なので。plus+codesはGoogle公式というわけでもないようなので、今後の展開は未知数。 あーありがち - GeohashのグリッドをGoogle Maps上に再現するツール書いた 古い記事だがやろうとしていることはほぼコレ。 URI設計の問題クエリで渡すか、ハッシュで渡すか、階層へ盛り込むのもアリっちゃアリ。 http://example.com?geo=xn3pvxy http://example.com#xn3pvxy http://example.com/xn3pvxy ライブラリの選定経緯度とジオハッシュの相互変換にはライブラリを使用する。下記の二つが候補として見つかった。 davetroy/geohash-js chrisveness/latlon-geohash 開発が最近行われており、オプションにより制度の調整も行えるlatlon-geohashを採用した。 123const latLon = Geohash.decode(geoHash);console.log(`現在地の経度は$&#123;latLon.lat&#125;、緯度は$&#123;latLon.lon&#125;です。`); このように簡単にジオハッシュを経緯度へ変換できる。 1const geoHash = Geohash.encode(latLon.lat, latLon.lon, 8); 経緯度をジオハッシュ化する際に、3番目の引数で桁数（精度）を指定できる。未指定でも経緯度から自動判別を行う。","categories":[],"tags":[{"name":"Geohash","slug":"Geohash","permalink":"http://log.playr.jp/tags/Geohash/"}],"keywords":[]},{"title":"Webp 導入思案","slug":"Webp-導入思案","date":"2015-09-13T15:38:44.000Z","updated":"2015-11-20T15:45:53.111Z","comments":true,"path":"2015/09/14/Webp-導入思案.html","link":"","permalink":"http://log.playr.jp/2015/09/14/Webp-導入思案.html","excerpt":"","text":"Webpをさくっと導入できないか思案。 Can I use… Support tables for HTML5, CSS3, etc 取りあえず対応しているのはBlinkブラウザのみだが、モバイル対応へ重きを置くならば価値はありそう。 【翻訳】Introduction to WebP - 1000ch.net Webpの概要と導入の際の未サポートブラウザへのフォールバック方法を解説。記事内でも言及があるサーバーサイドでの実装が一番よさそうではある。 Deploying WebP via Accept Content Negotiation - igvita.com しかしサクっとはできなさそうなので、フロントで実装したい。とりあえず上記を参考に&lt;picture&gt;で試してみた。 Webp - Playground これは容易でとてもいい方法だと感じた。しかし今回はbackground-imageへのwebp導入を考えているので残念ながらこの方法は不可である。 色々調べると‘@supports‘を利用した方法を発見。 Using the WebP image format / blog unblock @supportsで機能が利用できるか確認し、分岐する手法が紹介されている。筆者は最終的にModernizrを使用したようだが(そりゃそうだよな…)、今回このためにModernizr入れるのは本末転倒である。@supports面白そうだしカジュアルなのでコレを採用。 @supports - CSS | MDN Can I use… Support tables for HTML5, CSS3, etc 1234background-image: url(\"../img/bg.png\");@supports (background-image: -webkit-image-set(url(\"../img/bg.webp\") 1x)) &#123; background-image: -webkit-image-set(url(\"../img/bg.webp\") 1x)&#125; Can I use… Support tables for HTML5, CSS3, etc CSS4で提案されているimage-listはかなりよさそうである。 CSS Image Values and Replaced Content Module Level 4 Bruce Lawson’s personal site : Save bandwidth with webP – soon with fallback! 1background-image: images(\"../img/bg.webp\", \"../img/bg.png\"); ただ現時点では対応しているブラウザはない様子。現時点ではimage-setが一番よさそう。","categories":[],"tags":[],"keywords":[]},{"title":"Conohaクラウドへ引っ越し","slug":"Conohaクラウドへ引っ越し","date":"2015-09-13T15:20:11.000Z","updated":"2016-02-28T15:29:53.187Z","comments":true,"path":"2015/09/14/Conohaクラウドへ引っ越し.html","link":"","permalink":"http://log.playr.jp/2015/09/14/Conohaクラウドへ引っ越し.html","excerpt":"","text":"旧Conohaで運用していたサイトをクラウド番へ引っ越しした。 正直今までのConohaは結構な頻度で止まっており、あまり信頼できるものではなく他社へ乗り換えを検討していた。しかし最近は極力楽をしたい欲求が強くなっており、その面でConohaクラウドに魅力を感じ、色々葛藤はあったものの改善の期待をこめて引っ越しを決心した。 さて、このConohaクラウド、サーバー追加の際にテンプレを選ぶことができ、LAMPやRails、Wordpressはもちろんのこと、MongoDBやJenkins、DockerやMEANなんてのもあって興味深い。機会があればそのへんも触ってみようと思う。","categories":[],"tags":[{"name":"Conoha","slug":"Conoha","permalink":"http://log.playr.jp/tags/Conoha/"}],"keywords":[]},{"title":"Nodeサイトの多言語化","slug":"Nodeサイトの多言語化","date":"2015-09-11T15:20:11.000Z","updated":"2016-02-28T15:34:56.529Z","comments":true,"path":"2015/09/12/Nodeサイトの多言語化.html","link":"","permalink":"http://log.playr.jp/2015/09/12/Nodeサイトの多言語化.html","excerpt":"","text":"Node.jsで構築したサイトを多言語化したいので、ちょっとだけググってみた。 JavaScript - HTMLでの国際化(i18nextとl10n.js) - Qiita 多言語対応のjsライブラリを紹介している記事。i18nextとl10n.jsという二つを紹介しながら、主にフロントの実装について書いてある。 今のアプリに実装するならばサーバーサイドで行うと思われるが、大体の手法は同一であろう。本格的に作る際にもっと詳しく調べていく予定。","categories":[],"tags":[{"name":"i18n","slug":"i18n","permalink":"http://log.playr.jp/tags/i18n/"}],"keywords":[]},{"title":"MongoDBのバックアップ思案","slug":"MongoDBのバックアップ思案","date":"2015-09-10T15:32:31.000Z","updated":"2015-11-20T15:34:33.706Z","comments":true,"path":"2015/09/11/MongoDBのバックアップ思案.html","link":"","permalink":"http://log.playr.jp/2015/09/11/MongoDBのバックアップ思案.html","excerpt":"","text":"MongoDBをバックアップし、リストアまで行いたい。 第11回 MongoDBのバックアップ：MongoDBでゆるふわDB体験｜gihyo.jp … 技術評論社 バックアップ起動中のMongoのバックアップにはmongodumpが一般的のよう。小規模ならこれで十分か。 mongodump — MongoDB Manual 3.0 1$ mongodump --out /opt/backup/mongodump_20150911 outオプションで保存先を指定できる。指定しなかったらカレントディレクトへ。そのなかにデータベースごとのダンプファイルを作成してくれる。 リストアリストアはmongorestoreで。 mongorestore — MongoDB Manual 3.0 1$ mongorestore /tmp/path 1$ mongorestore /tmp/path -d name でデータベースを指定 とりあえず上の方法で手動でのバックアップ&amp;リストアは問題なく、軽快にできた。今後は自動化していきたい。","categories":[],"tags":[{"name":"MongoDB","slug":"MongoDB","permalink":"http://log.playr.jp/tags/MongoDB/"}],"keywords":[]},{"title":"Node.js 4.0","slug":"Node-js-4-0","date":"2015-09-09T13:29:39.000Z","updated":"2015-11-20T15:31:17.066Z","comments":true,"path":"2015/09/09/Node-js-4-0.html","link":"","permalink":"http://log.playr.jp/2015/09/09/Node-js-4-0.html","excerpt":"","text":"Node.jsの4.0がリリースされたようなので、順次アプリケーションを移行中。 Node v4.0.0 (Stable) | Node.js 問題なくnvm install 4.0でインスコできるよう。 Arrow Functionが解禁になったので、これも少しずつ書き換えていきたい。 あとはletとconstの使い分け。基本constでいこうと思うけど、どうだろう。","categories":[],"tags":[{"name":"Node.js","slug":"Node-js","permalink":"http://log.playr.jp/tags/Node-js/"}],"keywords":[]},{"title":"Grid","slug":"Grid","date":"2015-09-07T12:05:05.000Z","updated":"2015-11-20T15:26:09.223Z","comments":true,"path":"2015/09/07/Grid.html","link":"","permalink":"http://log.playr.jp/2015/09/07/Grid.html","excerpt":"","text":"グリッドデザインの流れにある「カード型デザイン」の記事を読んだ。 最新Webトレンド「カード型デザイン」を取り入れるべき、効果的な4つの理由 - PhotoshopVIP ポイントは IAの作成 UXの工場 普遍性 の3点。 この手のデザインは割とまえからある気がするが、スマホデバイスとの親和性と相まって地位を確立した感じであろうか。 CSS Grid Layouts今後がっつりとしたグリッドデザインをマークアップするのであれば、display: gridを使用したい。 The future of layout with CSS: Grid Layouts — Medium CSSグリッドを使用した実装。 1.container &#123; display: grid; &#125; Can I use… Support tables for HTML5, CSS3, etc 各ブラウザベンダーの対応はまだまだこれから。IEも先行実装したものの使用が変わっていき、互換性が怪しいらしい。とりあえずDemoを作ってみた。 CSS Grid Layout - Playground ie11とEdgeで動作を確認。他のブラウザではDivの羅列となったので導入するのであればPolyfillは必須のよう。 FremyCompany/css-grid-polyfill Polyfillはコレ。Demoもあるし かなり容易に複雑なグリッドレイアウトを作れるし、レスポンシブ化も簡潔に書けそう。早く使いたいので各ベンダの今後の動向を見たい。現時点では未対応環境が多すぎるし、上記Polyfill内でもプロダクションへの導入は慎重にと言及されている。でもFirefoxが対応したらPolyfillかましてどこかで使うかも。","categories":[],"tags":[],"keywords":[]},{"title":"Prefitch","slug":"Prefitch","date":"2015-09-07T11:03:17.000Z","updated":"2015-11-20T15:04:10.513Z","comments":true,"path":"2015/09/07/Prefitch.html","link":"","permalink":"http://log.playr.jp/2015/09/07/Prefitch.html","excerpt":"","text":"来訪者が高い可能性で次に読み込むファイルを先読みさせたい。 HTML5 Prefetch — Medium 対応ブラウザやテスト方法など、かなり詳しく解説している記事。 種類は主に以下の四つがあるよう。 dns-prefetch – ドメインの名前解決 subresource – 現在のページで使用するファイルをキャッシュ prefetch – 後続のページで使用するファイルをキャッシュ prerender – バックグラウンドでレンダリングまで行う 今回はprefetchを試してみた。 1&lt;link rel=”prefetch” href=”/js/example.js”&gt; 効果のほどは今後検証していく。","categories":[],"tags":[],"keywords":[]},{"title":"Web Manifest","slug":"Web-Manifest","date":"2015-09-02T14:45:58.000Z","updated":"2015-11-20T15:00:41.795Z","comments":true,"path":"2015/09/02/Web-Manifest.html","link":"","permalink":"http://log.playr.jp/2015/09/02/Web-Manifest.html","excerpt":"","text":"manifest.jsonサイトのWebアプリ化を押し進めるためmanifest.jsonを設置。 Manifest for a web application App manifest - App Center | MDN MDNにも記事があるし、普段使いのFirefoxでもしっかり動くのだろうか。 Service Worker で作る 最新モバイル ウェブ エクスペリエンス - Google Developers Summit まとめ 上記はモバイルフレンドリーの目線でWebアプリ化に幅広く言及している記事。 Webアプリをネイティブアプリっぽく起動するWebApp Manifest - Coding Design’s Tumblr この記事はさっと読めて、参考になる。 manifest.json12345678910111213&#123; \"name\": \"Kinlan's Amazing Application ++\", \"short_name\": \"Kinlan's Amaze App\", \"icons\": [ &#123; \"src\": \"launcher-icon-3x.png\", \"sizes\": \"144x144\", \"type\": \"image/png\" &#125; ], \"start_url\": \"index.html\", \"display\": \"standalone\"&#125; これが最低限必要な項目らしい。 index.html1&lt;link rel=\"manifest\" href=\"/manifest.json\"&gt; あとはヘッドで読み込めばオケ。 インストールバナー manifest.json でWebアプリを「ホーム画面に追加」自動バナー表示に対応させる これはService Workerを使用した「ホームへ追加」バナーの表示の記事。 12345window.addEventListener('load', function() &#123; if ('serviceWorker' in navigator) &#123; navigator.serviceWorker.register('/sw.js'); &#125;&#125;); これもインストールバナーについて詳しく解説している記事。 Increasing engagement with Web App install banners — Google Web Updates そしてそのサンプル。 samples/app-install-banner at gh-pages · GoogleChrome/samples Choromeでは問題なく動作し、インストールバナーも表示された。ただ一度インストールをしないを選択すると、次回再表示はなさそうなのであまり強力な効果は期待できないかも。 テーマカラーtheme-colorの設定がmanifest.json内に記述できるようになったよう。 Using the web app manifest to specify a site wide theme colour 従来のmetaタグだとこう。 1&lt;meta name=\"theme-color\" content=\"#2196F3\"&gt; manifest.jsonだとこう。 1\"theme_color\": \"#2196F3\" しかしmanifest.jsonのみの記述だとホームへ追加しないと効力を発揮しないようなので、現時点では両方記述したほうがいいかもしれない。 FirefoxFirefoxでもServiceWorkerをテストする。 about:configでdom.serviceWorkersを検索し、フラグをtrueへ変更する。 ServiceWorkerは問題なく作動したが、アプリ化の効果は現時点では無さそう。今後に期待したい。","categories":[],"tags":[],"keywords":[]},{"title":"フォントコンバーター","slug":"フォントコンバーター","date":"2015-09-02T09:45:30.000Z","updated":"2015-11-16T04:03:01.575Z","comments":true,"path":"2015/09/02/フォントコンバーター.html","link":"","permalink":"http://log.playr.jp/2015/09/02/フォントコンバーター.html","excerpt":"","text":"サイトへWebフォントを導入する際の手順。 フォントの変換はFont Converterで、Woff2へはwoff to woff2 converterで行える。 123456789@font-face &#123; font-family: 'webfont'; src:url('font/webfont.eot'); src:url('font/webfont.eot?#iefix') format('embedded-opentype'), url('font/webfont.woff2') format('woff2') url('font/webfont.woff') format('woff'), url('font/webfont.ttf') format('truetype'), url('font/webfont.svg#icomoon') format('svg');&#125; IE8以下の対応はもういいかなとも思う。","categories":[],"tags":[{"name":"css","slug":"css","permalink":"http://log.playr.jp/tags/css/"},{"name":"webfont","slug":"webfont","permalink":"http://log.playr.jp/tags/webfont/"}],"keywords":[]},{"title":"Firefox 64bit","slug":"Firefox-64bit","date":"2015-08-17T11:36:38.000Z","updated":"2015-11-16T03:44:02.156Z","comments":true,"path":"2015/08/17/Firefox-64bit.html","link":"","permalink":"http://log.playr.jp/2015/08/17/Firefox-64bit.html","excerpt":"","text":"BetaとDeveloper Edition(Aurora)では64bit版が使えるようなので、導入してみた。 Firefox Beta Firefox Developer Edition Developer Editionはたまにしか使わないのでよくわからないが、常用しているBetaはいい感じ。 思ったより快適でメモリもまだ余裕があるので、マシンスペックによっては幸せになれるかと。 ついでにChromeも64bitへ上げたが、これこそ僕は検証でしか使用しないので違いは分からず。でも、きっとよくなってると思う。","categories":[],"tags":[{"name":"Firefox","slug":"Firefox","permalink":"http://log.playr.jp/tags/Firefox/"}],"keywords":[]},{"title":"Source Han Code JP","slug":"Source-Han-Code-JP","date":"2015-08-12T08:26:21.000Z","updated":"2015-11-16T03:36:14.741Z","comments":true,"path":"2015/08/12/Source-Han-Code-JP.html","link":"","permalink":"http://log.playr.jp/2015/08/12/Source-Han-Code-JP.html","excerpt":"","text":"最近はずっとSource Code Proを使っていたんだけど、ものは試しとSource Han Code JPを味見してみた。 adobe-fonts/source-han-code-jp この記事を参考にBracketsへ導入。(やっぱりすんなりとはいかなかった…) 1'Source Han Code jp Medium', ＭＳ ゴシック, 'MS Gothic', monospace 僕の環境では上記の用に記述すると動いた。ウェイトをもっと細くしたいが、Medium以外は認識しない…。 最初は結構違和感を感じてフォントサイズなどの微調整は必要だったけど、結果としてはなかなか、いい塩梅。日本語が入り乱れてるファイルの作業では効力を発揮しそうなので、今後はこれメインでいってみようかと。フロント向きだと感じた。","categories":[],"tags":[],"keywords":[]},{"title":"Windows10へVagrantを導入","slug":"Windows10へVagrantを導入","date":"2015-08-10T11:03:31.000Z","updated":"2015-11-16T03:25:01.502Z","comments":true,"path":"2015/08/10/Windows10へVagrantを導入.html","link":"","permalink":"http://log.playr.jp/2015/08/10/Windows10へVagrantを導入.html","excerpt":"","text":"Wordpressなどの開発はXamppで十分だが、Nodeを本格的にWindows上で行うのはきつい。というか本番環境がWindowsならまだいいかもしれないが、現実はほとんどそうではないので仮想環境上で開発すべきであろう。Windows10へアップグレードしたのを機会に、前々から検討していたVagrantでの開発環境導入を試みる。 事前作業Virtualization Technologyを有効にするVagrantは仮想環境を使用するため、Virtualization Technologyを有効にする必要がある。PCのBIOSに入り、Virtualization Technology を Enabled へ Vagrant、VirtualBoxをインストール各公式サイトから最新版をダウンロードし、インスコ。 Vagrant 公式サイトhttp://www.vagrantup.com/ VirtualBoxhttps://www.virtualbox.org/ BOXを取得配布サイトから必要なBoxを吟味。今回はCentOS v6.6 64bit。 Vagrantbox.eshttp://www.vagrantbox.es/ CentOS 6.6 64bit を追加ここからコマンドプロンプト 1$ vagrant box add centos6.6 http://sourceforge.net/projects/nrel-vagrant-boxes/files/CentOS-6.6-x86_64-v20150426.box 追加したBoxを確認1$ vagrant box list Vagrant 初期化ここからコマンドプロンプト on 作業フォルダ 1$ vagrant init centos6.6 仮想マシンの操作起動1$ vagrant up 状態確認1$ vagrant status 終了1$ vagrant halt 再起動1$ vagrant reload 破棄1$ vagrant destroy 仮想マシンへ接続TeraTermで接続した。 git インストール1$ sudo yum -y install git Node.js インストール123$ git clone https://github.com/creationix/nvm.git ~/.nvm$ source ~/.nvm/nvm.sh$ nvm install 0.12 1$ npm install --no-bin-links ファイアーウォールを停止12$ sudo service iptables stop$ sudo chkconfig iptables off 雑感Windows10でも今回は問題はなかったが、環境やVirtualBoxのバージョンによっては不具合も報告されているようなのでもうちょっと待ったほうが安全かもしれない。Vagrantを開発環境として本格運用していくならイメージの保存や構成管理ツールも合わせるのが楽っぽいので、順次導入していきたい。","categories":[],"tags":[{"name":"Windows","slug":"Windows","permalink":"http://log.playr.jp/tags/Windows/"},{"name":"Vagrant","slug":"Vagrant","permalink":"http://log.playr.jp/tags/Vagrant/"}],"keywords":[]},{"title":"CSS wii-change","slug":"CSS-wii-change","date":"2015-08-05T11:37:01.000Z","updated":"2016-03-02T08:11:21.843Z","comments":true,"path":"2015/08/05/CSS-wii-change.html","link":"","permalink":"http://log.playr.jp/2015/08/05/CSS-wii-change.html","excerpt":"","text":"CSS will-changeプロパティについての記事を読んだので早速試験中。 CSS will-changeプロパティについて知っておくべきこと 1will-change: transform; 簡単に言えばtranslate3dsなどのハックでGPUアクセレーションを有効化していたけど、それ以外の適切な手法でブラウザさんに最適化していただこうというものらしい。 ちょっと試してみてもあまり違いはわからなかったが、重い描画や低スペックマシンだと違いがでてくるのかも。何より最適化の意図を明確にすることができるので、設計に盛り込みやすい。 Can I use… Support tables for HTML5, CSS3, etc しかし現時点でSafariの実装はまだまだなので、しばらくは従来通りtranslate3dsを使うか、併用していくのがよさそう。 その他参考記事 will-change - CSS | MDN will-change | CSS-Tricks CSS Will Change Module Level 1 日本語訳","categories":[],"tags":[{"name":"CSS","slug":"CSS","permalink":"http://log.playr.jp/tags/CSS/"}],"keywords":[]},{"title":"npm-check-updates","slug":"npm-check-updates","date":"2015-06-11T11:36:08.000Z","updated":"2015-10-03T07:51:52.000Z","comments":true,"path":"2015/06/11/npm-check-updates.html","link":"","permalink":"http://log.playr.jp/2015/06/11/npm-check-updates.html","excerpt":"","text":"npm-check-updatesが便利という発見。 モジュールのリリース情報を確認して、必要ならば更新というくだりは難儀。npm outdatedしてpackage.jsonを書き換えてnpm installを行うのが通常の流れであるが、回数を重ねるとこれを行うのがおっくうになってくる。 npm-check-updatesはこのへんの手間を省いてくれる。 今回はコマンドが短くてよりよさげな開発版をインストール。 1npm install -g npm-check-updates@unstable これで更新確認から実行まで3ステップで行える。 12345678# 更新を確認$ ncu# package.jsonを更新$ ncu -u# 更新を実行$ npm install フロント開発でgulpを使用していると割と頻繁にupdateする必要がある。 マイナーバージョンアップであればあまり後先考えずガンガン上げていきたい性分なので、その作業の簡略化ができ素晴らしい。","categories":[],"tags":[{"name":"npm","slug":"npm","permalink":"http://log.playr.jp/tags/npm/"}],"keywords":[]},{"title":"gulp-imagemin","slug":"gulp-imagemin","date":"2015-05-25T11:28:08.000Z","updated":"2015-10-03T07:35:32.000Z","comments":true,"path":"2015/05/25/gulp-imagemin.html","link":"","permalink":"http://log.playr.jp/2015/05/25/gulp-imagemin.html","excerpt":"","text":"gulp-imageminで画像の最適化を突き詰める。 sindresorhus/gulp-imagemin 標準API gifsicle jpegtran optipng svgo gif、jpeg、png、svgと主要なフォーマットは標準搭載されているので、導入後すぐに試すことができる。 拡張モジュール webp advpng pngquant pngout pngcrush mozjpeg jpegoptim 拡張モジュールを用いることも可能。webpなども最適化することができる。全てを試してはいないが、pngquantやmozjpegは標準搭載のそれよりも圧縮効率がいい。 ただ、モジュールがでかくてインストールに時間がかかる。各プロジェクトにこれを導入していくと、なぜか申し訳ない気持ちになってくる。","categories":[],"tags":[],"keywords":[]},{"title":"Style Guide Boilerplate","slug":"Style-Guide-Boilerplate","date":"2015-05-21T11:24:23.000Z","updated":"2015-10-03T07:27:02.000Z","comments":true,"path":"2015/05/21/Style-Guide-Boilerplate.html","link":"","permalink":"http://log.playr.jp/2015/05/21/Style-Guide-Boilerplate.html","excerpt":"","text":"Style Guide Boilerplateがいい感じ。 bjankord/Style-Guide-Boilerplate DoccoとかKSSとか、ジェネレーターを使った運用を目指していたが、生成するドキュメントがいまいちシンプルさに欠け、結局自前で書いていたが、こーゆーのが今回はマッチしそう。","categories":[],"tags":[],"keywords":[]},{"title":"node-redis入門","slug":"node-redis入門","date":"2015-05-17T11:07:18.000Z","updated":"2015-10-03T07:52:34.000Z","comments":true,"path":"2015/05/17/node-redis入門.html","link":"","permalink":"http://log.playr.jp/2015/05/17/node-redis入門.html","excerpt":"","text":"Redisの修行を進めている。Nodeアプリ内で使う分には下記を参考に学習を進めていけばいい様子。 http://redis.io/ mranney/node_redis node-redis - node.js redisクライアント node.jsでRedisを使ってみる【準備編】 やはりセッション管理などはRedisで行いたい。Koaではkoa-redisを使えば容易に実装できた。 よりRedisをよりアプリケーションの広範囲で活用する際は下記で理解を深めるとよさそう。 入門 : Redis のデータ構造と概念 — Redis Documentation (Japanese Translation)","categories":[],"tags":[{"name":"Node.js","slug":"Node-js","permalink":"http://log.playr.jp/tags/Node-js/"},{"name":"Redis","slug":"Redis","permalink":"http://log.playr.jp/tags/Redis/"},{"name":"Koa","slug":"Koa","permalink":"http://log.playr.jp/tags/Koa/"}],"keywords":[]},{"title":"http-proxyでNode.jsの複数アプリを管理","slug":"http-proxyでNode-jsの複数アプリを管理","date":"2015-05-17T11:00:15.000Z","updated":"2015-10-03T07:52:22.000Z","comments":true,"path":"2015/05/17/http-proxyでNode-jsの複数アプリを管理.html","link":"","permalink":"http://log.playr.jp/2015/05/17/http-proxyでNode-jsの複数アプリを管理.html","excerpt":"","text":"一つのドメインで複数のnodeアプリを起動させたい。 http-proxy使えばできそうである。 nodejitsu/node-http-proxy 参考 Hosting multiple Express (node.js) apps on port 80http-proxyでプロキシAdd Star 別モジュールを利用しているが、PM2のくだりが参考になりそう。 bouncyを使ったNodejsのみのバーチャルホスト","categories":[],"tags":[{"name":"Node.js","slug":"Node-js","permalink":"http://log.playr.jp/tags/Node-js/"}],"keywords":[]},{"title":"Redis環境を構築(Windows7)","slug":"Redis環境を構築-Windows7","date":"2015-05-16T11:58:17.000Z","updated":"2015-10-03T07:52:16.000Z","comments":true,"path":"2015/05/16/Redis環境を構築-Windows7.html","link":"","permalink":"http://log.playr.jp/2015/05/16/Redis環境を構築-Windows7.html","excerpt":"","text":"PCへRedisをインストールした。 Redis.ioのダウンロードページ下、Other versionsからWindows版を配布しているリポジトリへ。 MSOpenTech/redis バージョンは2.8.19.1。ダウンロードしてインストーラーを起動、あとは普通に完了したっぽい。 上記方法ではどうやら失敗したもよう・・・。 Windows7にredisをインストールしてみた ↑の記事を参考にしこんどこそ成功。 原因は、まぁ気にせずいこう・・・。","categories":[],"tags":[{"name":"Redis","slug":"Redis","permalink":"http://log.playr.jp/tags/Redis/"}],"keywords":[]},{"title":"npmのたまに使うコマンド","slug":"npmのたまに使うコマンド","date":"2015-04-12T11:09:16.000Z","updated":"2015-10-03T07:52:46.000Z","comments":true,"path":"2015/04/12/npmのたまに使うコマンド.html","link":"","permalink":"http://log.playr.jp/2015/04/12/npmのたまに使うコマンド.html","excerpt":"","text":"よく使うコマンドは覚えてるんだけど、たまに使うコマンドは忘れちゃって毎回ググってる気がするのでメモ。 バージョン確認 1npm -v npm自身のアップデート 1npm i -g npm パッケージをアインインストール 1npm uninstall &lt;package&gt; パッケージの更新情報を確認 1npm outdated dependenciesだけインストール 1npm i --production","categories":[],"tags":[{"name":"Node.js","slug":"Node-js","permalink":"http://log.playr.jp/tags/Node-js/"},{"name":"npm","slug":"npm","permalink":"http://log.playr.jp/tags/npm/"}],"keywords":[]},{"title":"iojsをインストールしてみた","slug":"iojsをインストールしてみた","date":"2015-01-15T14:09:16.000Z","updated":"2015-11-14T15:49:27.697Z","comments":true,"path":"2015/01/15/iojsをインストールしてみた.html","link":"","permalink":"http://log.playr.jp/2015/01/15/iojsをインストールしてみた.html","excerpt":"","text":"昨日ついにnode.jsのファークであるio.jsがリリースされましたね。 io.js - JavaScript I/O: Koaで色々やろうと考えている僕としてはある程度動向を知っておく必要があるため、早速ローカル環境へインストールし、既存のコードが動作するかまで確認を行いました。 io.jsのインストール普通にインストーラーから… おお～、普通にインストールできた。なにか新鮮である！ 1$ iojs -v でインストールを確認。v1.0.1が返ってきました！ モジュールを確認現時点ではほぼ問題ないと思いますが、常用モジュールは動向を確認しておきたいですよね。 Koa1$ iojs app.js --harmony オプションなしでKoaが動く！ もちろんKoaチームもiojs対応の方向へ進んでいるっぽい。 nodemonnodemon は nodemon.json を配置し execMap を記述すれば問題なく動作するようです。 12345&#123; \"execMap\": &#123; \"js\": \"iojs\" &#125;&#125; 随時チェックしていきたいです！","categories":[],"tags":[{"name":"Node.js","slug":"Node-js","permalink":"http://log.playr.jp/tags/Node-js/"},{"name":"io.js","slug":"io-js","permalink":"http://log.playr.jp/tags/io-js/"}],"keywords":[]},{"title":"ブログをHEXOへ引越し","slug":"ブログをHEXOへ引越し","date":"2015-01-03T13:33:56.000Z","updated":"2015-11-14T15:49:17.720Z","comments":true,"path":"2015/01/03/ブログをHEXOへ引越し.html","link":"","permalink":"http://log.playr.jp/2015/01/03/ブログをHEXOへ引越し.html","excerpt":"","text":"新年だしでブログをHEXOへ引越ししました。 てぃーだブログで転がしていたブログの蘇生計画のひとつです. HEXO読みはヘクソ。いわゆる静的サイトジェネレーターの一つ。 JekyllやOctopressのnode版といった感じ。 おもな特徴は… ビルド、デプロイはコマンドからでオケ マークダウンをサポートしているのでプログラマライク 豊富なプラグイン 豊富なテーマ といったところ。テーマの自作も標準でEJSを採用しているので、シンプルに書ける。制作者が台湾の方でユーザーにも中国圏の方が多いのか、プラグインやテーマに中国語がちょくちょく。基本的にゃ問題なく使えます。 インストールインストールはnpmから 1$ npm install hexo -g ジェネレーターでベースを一発生成。 1$ hexo init &lt;フォルダ&gt; 生成されたプロジェクトに移動して npm install 12$ cd &lt;フォルダ&gt;$ npm install あとはhexo serverでローカルサーバーが立ち上がり、http://localhost:4000にブログが立ち上がります。 デプロイ今回はGithub Pages上に導入したので、_config.ymlのdeplpy:部分を修正。 123456# Deployment## Docs: http://hexo.io/docs/deployment.htmldeploy: type: github repo: https://github.com/&lt;プロジェクト&gt;/&lt;プロジェクト&gt;.github.io.git branch: master generateコマンドでアップロードする性的サイトを生成して、 1$ hexo generate deployコマンドでデプロイ。 1$ hexo deploy generateコマンドは-gオプションとしてデプロイと同時に行うことも可能。 1$ hexo deploy -g こっちの方が使うとこが多いかと。 記事投稿newコマンドでひな形を生成。 1$ hexo new &lt;記事タイトル&gt; source/_posts/内に生成されたひな形へマークダウンで内容を記述。 12345title: 記事タイトルdate: 2015-01-01 00:00:00tags:---以下内容を書き込む そしてデプロイ 1$ hexo deploy -g プラグインプラグイン一覧 プラグインもnpm からインストール。 1$ npm install &lt;プラグイン名&gt; --save 以下導入したプラグイン hexo-generator-feed 公式。Atomを生成 hexo-generator-sitemap 公式。サイトマップを生成 hexo-generator-baidu-sitemap Baidu用サイトマップを生成。こーゆーのは面白そうなので導入 hexo-generator-minify hexo gmコマンドでCSSとJsをMinifyして生成。速度厨なので導入 テーマテーマ一覧 テーマはgitからインストール。 1$ git clone &lt;リポジトリ&gt; themes/&lt;テーマ名&gt; 公式テーマはデフォルトのLandscapeを含めて三つ容易されています。 Landscape - デモ Phase - デモ Light - デモ 今回は日本製のApolloを採用。 Apollo - デモ まとめかなり容易にブログ環境を構築できました。マークダウンでGistにためたネタを投稿しやすいのでウハウハ。","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://log.playr.jp/tags/hexo/"}],"keywords":[]},{"title":"CloudFlare導入してみる","slug":"CloudFlare導入してみる","date":"2013-04-07T08:50:55.000Z","updated":"2015-11-13T18:48:07.527Z","comments":true,"path":"2013/04/07/CloudFlare導入してみる.html","link":"","permalink":"http://log.playr.jp/2013/04/07/CloudFlare導入してみる.html","excerpt":"","text":"サイトにCloudFlare導入してみたが、コレどうなんさろう…。メインビジュアルが結構デカイから恩恵があるのかとおもってたけど、よくわかんないッス。 とりあえず様子見だなー。","categories":[],"tags":[],"keywords":[]},{"title":"Fontelloを導入","slug":"Fontelloを導入","date":"2013-04-05T08:42:38.000Z","updated":"2015-11-15T05:53:09.054Z","comments":true,"path":"2013/04/05/Fontelloを導入.html","link":"","permalink":"http://log.playr.jp/2013/04/05/Fontelloを導入.html","excerpt":"","text":"NAUTILUSサイトの外部リンクをアイコンで分かりやすくしたいなーと思い、今日改造に着手。どうせならアイコンフォントで導入しよー、ということで調査した結果、下記の手法で改造を開始。今回はfontelloを使用。普通のフォントアイコンをつかうと無駄にサイズが大きくなるので、こーゆーピンポイントでチョイスできるサービスは大変便利。 この四つをアイコンフォントとして、導入するる。 ついでに_blankを記入したときに、自動でアイコンを追加してくれるようJSで追加！この記事を参考に。 と思ったら、同様のことをCSSだけでできるのね。この辺でセレクタとかの知識不足が露呈しますな。ホームのアイコンは手動で入力。 わりとシンプルなコードでできますな。ん～今日はこんなもんかと。","categories":[],"tags":[],"keywords":[]},{"title":"SOY CMSを導入","slug":"CMSを導入","date":"2013-03-07T08:35:38.000Z","updated":"2015-11-14T15:48:51.407Z","comments":true,"path":"2013/03/07/CMSを導入.html","link":"","permalink":"http://log.playr.jp/2013/03/07/CMSを導入.html","excerpt":"","text":"サイトに以前から検討していたCMSを導入。AD-EDITをいじってたが、デザイン弄りにくくて頓挫。Perlほとんど読めないからなぁ。沖縄産だから使いたかったが…。 ってことで行き着いたSOYでなんとか完成。ああ、SOYいいね、ソイ。いいっす、ボクには扱いやすす。PHPはギリギリいけるな。 ということで、とりあえずトップとInfoページは全面SOY化。メディアとリクエストもそのうちSOY化したら長い目で見ていいかも。メールフォームやフォトはまだまだ検討ですな。いまでも事足りてるし。","categories":[],"tags":[{"name":"SOYCMS","slug":"SOYCMS","permalink":"http://log.playr.jp/tags/SOYCMS/"}],"keywords":[]}]}